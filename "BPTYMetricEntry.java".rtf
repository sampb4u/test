{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 package com.bwinparty.utils.logger.impl;\
\
import com.google.gson.annotations.SerializedName;\
import java.text.SimpleDateFormat;\
import java.util.Map;\
import java.util.TimeZone;\
import org.apache.log4j.lf5.LogLevel;\
import org.apache.log4j.spi.LoggingEvent;\
\
public class BPTYMetricEntry\
\{\
  private static SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");\
  private String env;\
  private String host;\
  private String thread;\
  private String sourceIp;\
\
  @SerializedName("@timestamp")\
  private String ts;\
  private Application app;\
  private Entry entry;\
  private Map<String, Object> context;\
\
  private BPTYMetricEntry(EntryType type)\
  \{\
    dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));\
\
    this.entry = new Entry(type);\
  \}\
\
  public static BPTYMetricEntry getTimerEntry() \{\
    return new BPTYMetricEntry(EntryType.TIMER);\
  \}\
\
  public static BPTYMetricEntry getCounterEntry() \{\
    return new BPTYMetricEntry(EntryType.COUNTER);\
  \}\
\
  public void setAppEnvProperties(String env, String host, String appName, String appVersion)\
  \{\
    this.env = env;\
    this.host = host;\
    this.app = new Application(appName, appVersion);\
  \}\
\
  public void setInternalProperties(LoggingEvent logEvent)\
  \{\
    this.entry.setClazz(logEvent.getLoggerName());\
    this.ts = dateFormatter.format(Long.valueOf(logEvent.timeStamp));\
    this.thread = logEvent.getThreadName();\
    setSourceIP(this.thread);\
  \}\
\
  private void setSourceIP(String threadName) \{\
    try \{\
      if ((threadName != null) && (threadName.trim().length() > 0)) \{\
        int index = threadName.indexOf("RMI TCP Connection");\
        if (index != -1) \{\
          int tempIndex = threadName.lastIndexOf("-");\
          if (tempIndex != -1)\
            this.sourceIp = threadName.substring(tempIndex + 1);\
        \}\
      \}\
    \}\
    catch (Exception e)\
    \{\
    \}\
  \}\
\
  public void setBasicProperties(LogLevel level, String clazz)\
  \{\
    this.entry.setClazz(clazz);\
    this.ts = dateFormatter.format(Long.valueOf(System.currentTimeMillis()));\
  \}\
\
  public Map<String, Object> getContext() \{\
    return this.context;\
  \}\
\
  public void setContext(Map<String, Object> context) \{\
    this.context = context;\
  \}\
\
  public void setEntry(String group, long value, String correlation) \{\
    this.entry.setUseCase(group);\
    this.entry.setValue(value);\
    this.entry.setCorrelation(correlation);\
    this.entry.setStep("BEGIN");\
  \}\
\
  public void setStep(String stepName, long timeTaken) \{\
    this.entry.setValue(timeTaken);\
    this.entry.setStep(stepName);\
  \}\
\
  public void setEnd(long timeTaken) \{\
    this.entry.setValue(timeTaken);\
    this.entry.setStep("END");\
  \}\
\
  public void setCount(long count) \{\
    this.entry.setValue(count);\
  \}\
\
  public void setMessage(String message) \{\
    this.entry.setMessage(message);\
  \}\
\
  public void setStatus(int status) \{\
    this.entry.setStatus(status);\
  \}\
\
  public String toString()\
  \{\
    StringBuilder sb = new StringBuilder();\
    sb.append(" [");\
    if ((this.entry.getType() != null) && (!this.entry.getType().toString().isEmpty())) \{\
      sb.append("type:").append(this.entry.getType().name());\
    \}\
    if ((this.entry.getUseCase() != null) && (!this.entry.getUseCase().isEmpty())) \{\
      sb.append(", useCase:").append(this.entry.getUseCase()).append(", value:").append(this.entry.getValue());\
    \}\
\
    if ((getContext() != null) && (!getContext().isEmpty())) \{\
      sb.append(", \{");\
      for (String key : getContext().keySet()) \{\
        sb.append(key).append(":").append(getContext().get(key)).append(",");\
      \}\
      sb.append("\}");\
    \}\
\
    sb.append("]");\
\
    return sb.toString();\
  \}\
\
  private class Application\
  \{\
    private String name;\
    private String version;\
\
    public Application(String name, String version)\
    \{\
      this.name = name;\
      this.version = version;\
    \}\
\
    public String getName()\
    \{\
      return this.name;\
    \}\
\
    public String getVersion()\
    \{\
      return this.version;\
    \}\
  \}\
\
  private class Entry\
  \{\
    private EntryType type = EntryType.NONE;\
    private String correlation;\
    private String useCase;\
    private long value;\
    private String step;\
\
    @SerializedName("class")\
    private String clazz;\
    private String message;\
    private int status = -1;\
\
    public Entry(EntryType type)\
    \{\
      this.type = type;\
    \}\
\
    public void setClazz(String clazz)\
    \{\
      this.clazz = clazz;\
    \}\
\
    public EntryType getType()\
    \{\
      return this.type;\
    \}\
\
    public void setType(EntryType type)\
    \{\
      this.type = type;\
    \}\
\
    public String getUseCase() \{\
      return this.useCase;\
    \}\
\
    public void setUseCase(String useCase) \{\
      this.useCase = useCase;\
    \}\
\
    public long getValue() \{\
      return this.value;\
    \}\
\
    public void setValue(long value) \{\
      this.value = value;\
    \}\
\
    public String getStep() \{\
      return this.step;\
    \}\
\
    public void setStep(String step) \{\
      this.step = step;\
    \}\
\
    public String getMessage() \{\
      return this.message;\
    \}\
\
    public void setMessage(String message) \{\
      this.message = message;\
    \}\
\
    public void setStatus(int status) \{\
      this.status = status;\
    \}\
\
    public int getStatus() \{\
      return this.status;\
    \}\
\
    public String getCorrelation() \{\
      return this.correlation;\
    \}\
\
    public void setCorrelation(String correlation) \{\
      this.correlation = correlation;\
    \}\
  \}\
\}}