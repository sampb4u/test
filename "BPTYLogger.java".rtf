{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 package com.bwinparty.utils.logger;\
\
import java.util.Map;\
import java.util.UUID;\
import java.util.concurrent.ConcurrentHashMap;\
import org.apache.log4j.Logger;\
\
public class BPTYLogger\
\{\
  private Logger logstash;\
  private static Map<String, BPTYLogger> logMap = new ConcurrentHashMap();\
  private static Object MUTEX = new Object();\
\
  protected BPTYLogger(String loggerName) \{\
    this.logstash = Logger.getLogger(loggerName);\
  \}\
\
  public static BPTYLogger getLogger(String name)\
  \{\
    BPTYLogger cLogger = (BPTYLogger)logMap.get(name);\
    if (cLogger == null) \{\
      synchronized (MUTEX) \{\
        cLogger = (BPTYLogger)logMap.get(name);\
        if (cLogger == null) \{\
          cLogger = new BPTYLogger(name);\
          logMap.put(name, cLogger);\
        \}\
      \}\
    \}\
    return cLogger;\
  \}\
\
  public boolean isDebugEnabled() \{\
    return this.logstash.isDebugEnabled();\
  \}\
\
  public boolean isInfoEnabled() \{\
    return this.logstash.isInfoEnabled();\
  \}\
\
  public boolean isTraceEnabled() \{\
    return this.logstash.isTraceEnabled();\
  \}\
\
  public IBPTYLogger getLogEntry(String useCase) \{\
    return getLogEntry(useCase, null);\
  \}\
\
  public IBPTYLogger getLogEntry(String useCase, String correlationId) \{\
    IBPTYLogger loggerEntry = new BPTYLoggerImpl(this.logstash, useCase, correlationId);\
    return loggerEntry;\
  \}\
\
  public IBPTYLogger getLogEntry(String useCase, String fe, String brand, String product, String channel, String correlationId)\
  \{\
    IBPTYLogger loggerEntry = getLogEntry(useCase, correlationId);\
    loggerEntry.addProperty("FE", fe);\
    loggerEntry.addProperty("BRAND", brand);\
    loggerEntry.addProperty("PRODUCT", product);\
    loggerEntry.addProperty("CHANNEL", channel);\
    return loggerEntry;\
  \}\
\
  public static String generateCorrelationId() \{\
    return UUID.randomUUID().toString();\
  \}\
\}}