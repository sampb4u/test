{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 package com.bwinparty.utils.logger.impl;\
\
import com.google.gson.annotations.SerializedName;\
import java.text.SimpleDateFormat;\
import java.util.ArrayList;\
import java.util.List;\
import java.util.Map;\
import java.util.TimeZone;\
import org.apache.log4j.Layout;\
import org.apache.log4j.Level;\
import org.apache.log4j.lf5.LogLevel;\
import org.apache.log4j.spi.LoggingEvent;\
import org.apache.log4j.spi.ThrowableInformation;\
\
public class BPTYLogEntry\
\{\
  private static SimpleDateFormat dateFormatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");\
  private String env;\
  private String host;\
  private String thread;\
  private String sourceIp;\
\
  @SerializedName("@timestamp")\
  private String ts;\
  private Application app;\
  private Entry entry;\
  private Map<String, Object> context;\
\
  private BPTYLogEntry(EntryType type)\
  \{\
    dateFormatter.setTimeZone(TimeZone.getTimeZone("UTC"));\
\
    this.entry = new Entry(type);\
  \}\
\
  public static BPTYLogEntry getFuncEntry() \{\
    return new BPTYLogEntry(EntryType.FUNC);\
  \}\
\
  public static BPTYLogEntry getTechEntry() \{\
    return new BPTYLogEntry(EntryType.TECH);\
  \}\
\
  public static BPTYLogEntry getLegacyEntry() \{\
    return new BPTYLogEntry(EntryType.NONE);\
  \}\
\
  public void setAppEnvProperties(String env, String host, String appName, String appVersion)\
  \{\
    this.env = env;\
    this.host = host;\
    this.app = new Application(appName, appVersion);\
  \}\
\
  public void setInternalProperties(LoggingEvent logEvent)\
  \{\
    this.entry.setLevel(logEvent.getLevel().toString());\
    this.entry.setClazz(logEvent.getLoggerName());\
    this.entry.setThrowable(formatThrowable(logEvent.getThrowableStrRep()));\
    this.entry.setThrowableHierarchy(formatThrowableHierarchy(logEvent.getThrowableInformation()));\
\
    this.ts = dateFormatter.format(Long.valueOf(logEvent.timeStamp));\
    this.thread = logEvent.getThreadName();\
    setSourceIP(this.thread);\
  \}\
\
  private void setSourceIP(String threadName) \{\
    try \{\
      if ((threadName != null) && (threadName.trim().length() > 0)) \{\
        int index = threadName.indexOf("RMI TCP Connection");\
        if (index != -1) \{\
          int tempIndex = threadName.lastIndexOf("-");\
          if (tempIndex != -1)\
            this.sourceIp = threadName.substring(tempIndex + 1);\
        \}\
      \}\
    \}\
    catch (Exception e)\
    \{\
    \}\
  \}\
\
  public void setBasicProperties(LogLevel level, String clazz)\
  \{\
    this.entry.setLevel(level.toString());\
    this.entry.setClazz(clazz);\
    this.ts = dateFormatter.format(Long.valueOf(System.currentTimeMillis()));\
  \}\
\
  public void setEntry(String correlation, String group, String message, Map<String, Object> context)\
  \{\
    this.entry.setCorrelation(correlation);\
    this.entry.setUseCase(group);\
    this.entry.setMessage(message);\
    setContext(context);\
  \}\
\
  public void setEntry(String group, String message, String correlation) \{\
    this.entry.setCorrelation(correlation);\
    this.entry.setUseCase(group);\
    this.entry.setMessage(message);\
  \}\
\
  public Map<String, Object> getContext() \{\
    return this.context;\
  \}\
\
  public void setContext(Map<String, Object> context) \{\
    this.context = context;\
  \}\
\
  public void setEntry(String correlation, String message)\
  \{\
    this.entry.setCorrelation(correlation);\
    this.entry.setMessage(message);\
  \}\
\
  public String toString()\
  \{\
    String serialEntry = this.entry.getMessage();\
\
    serialEntry = serialEntry + " [";\
    if ((this.entry.getCorrelation() != null) && (!this.entry.getCorrelation().isEmpty())) \{\
      serialEntry = serialEntry + "correlation:" + this.entry.getCorrelation();\
    \}\
    if ((this.entry.getUseCase() != null) && (!this.entry.getUseCase().isEmpty())) \{\
      serialEntry = serialEntry + ", group:" + this.entry.getUseCase();\
    \}\
    if ((this.entry.getType() != null) && (!this.entry.getType().toString().isEmpty())) \{\
      serialEntry = serialEntry + ", type:" + this.entry.getType();\
    \}\
\
    if ((getContext() != null) && (!getContext().isEmpty()))\
    \{\
      serialEntry = serialEntry + ", \{";\
\
      for (String key : getContext().keySet()) \{\
        serialEntry = serialEntry + key + ":" + getContext().get(key) + ", ";\
      \}\
      serialEntry = serialEntry + "\}";\
    \}\
\
    serialEntry = serialEntry + "]";\
\
    return serialEntry;\
  \}\
\
  private String formatThrowable(String[] throwableRep)\
  \{\
    if ((throwableRep != null) && (throwableRep.length > 0)) \{\
      String formattedString = "";\
\
      for (String line : throwableRep) \{\
        formattedString = formattedString + line + Layout.LINE_SEP;\
      \}\
      return formattedString;\
    \}\
\
    return null;\
  \}\
\
  private String[] formatThrowableHierarchy(ThrowableInformation info)\
  \{\
    if ((info != null) && (info.getThrowable() != null))\
    \{\
      List lst = new ArrayList();\
\
      buildThrowableHierarchy(info.getThrowable(), lst);\
      return (String[])lst.toArray(new String[0]);\
    \}\
\
    return null;\
  \}\
\
  private void buildThrowableHierarchy(Throwable th, List<String> lst)\
  \{\
    if (th != null)\
    \{\
      lst.add(th.getClass().getSimpleName());\
\
      buildThrowableHierarchy(th.getCause(), lst);\
    \}\
  \}\
\
  public void setMessage(String message)\
  \{\
    this.entry.setMessage(message);\
  \}\
\
  public String getUsecase() \{\
    return this.entry.getUseCase();\
  \}\
\
  public String getMessage() \{\
    return this.entry.getMessage();\
  \}\
\
  public String getCorrelationId() \{\
    return this.entry.getCorrelation();\
  \}\
\
  private class Application\
  \{\
    private String name;\
    private String version;\
\
    public Application(String name, String version)\
    \{\
      this.name = name;\
      this.version = version;\
    \}\
\
    public String getName()\
    \{\
      return this.name;\
    \}\
\
    public String getVersion()\
    \{\
      return this.version;\
    \}\
  \}\
\
  private class Entry\
  \{\
    private EntryType type = EntryType.NONE;\
    private String correlation;\
    private String useCase;\
    private String level;\
\
    @SerializedName("class")\
    private String clazz;\
    private String message;\
    private String throwable;\
    private String[] throwableHierarchy;\
\
    public Entry(EntryType type)\
    \{\
      this.type = type;\
    \}\
\
    public void setCorrelation(String correlation)\
    \{\
      this.correlation = correlation;\
    \}\
\
    public void setLevel(String level)\
    \{\
      this.level = level;\
    \}\
\
    public void setClazz(String clazz)\
    \{\
      this.clazz = clazz;\
    \}\
\
    public void setUseCase(String useCase)\
    \{\
      this.useCase = useCase;\
    \}\
\
    public void setMessage(String message)\
    \{\
      this.message = message;\
    \}\
\
    public EntryType getType()\
    \{\
      return this.type;\
    \}\
\
    public void setType(EntryType type)\
    \{\
      this.type = type;\
    \}\
\
    public String getCorrelation()\
    \{\
      return this.correlation;\
    \}\
\
    public String getUseCase()\
    \{\
      return this.useCase;\
    \}\
\
    public String getMessage()\
    \{\
      return this.message;\
    \}\
\
    public String getThrowable()\
    \{\
      return this.throwable;\
    \}\
\
    public void setThrowable(String throwable)\
    \{\
      this.throwable = throwable;\
    \}\
\
    public String[] getThrowableHierarchy()\
    \{\
      return this.throwableHierarchy;\
    \}\
\
    public void setThrowableHierarchy(String[] throwableHierarchy)\
    \{\
      this.throwableHierarchy = throwableHierarchy;\
    \}\
  \}\
\}}