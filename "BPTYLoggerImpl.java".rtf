{\rtf1\ansi\ansicpg1252\cocoartf1348\cocoasubrtf170
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 package com.bwinparty.utils.logger;\
\
import com.bwinparty.utils.logger.impl.BPTYLogEntry;\
import com.bwinparty.utils.logger.impl.BPTYMetricEntry;\
import java.math.BigDecimal;\
import java.math.BigInteger;\
import java.util.Map;\
import java.util.Map.Entry;\
import java.util.concurrent.ConcurrentHashMap;\
import org.apache.log4j.Logger;\
\
public class BPTYLoggerImpl\
  implements IBPTYLogger\
\{\
  private final Logger logger;\
  private final BPTYLogEntry entry;\
  private static final String SEPARATOR = "-";\
  private Map<String, Object> context;\
  private long startTime = 0L;\
  private long stepStartTime = 0L;\
  private BPTYMetricEntry timerEntry;\
  private String useCase;\
  private String correlation;\
\
  BPTYLoggerImpl(Logger logger, String useCase, String correlation)\
  \{\
    this.logger = logger;\
    this.useCase = useCase;\
    this.correlation = correlation;\
    this.entry = getLogEntry();\
    startTimer();\
  \}\
\
  public IBPTYLogger addProperty(String key, String value)\
  \{\
    if (this.context == null) \{\
      this.context = new ConcurrentHashMap();\
      this.entry.setContext(this.context);\
    \}\
    if ((key != null) && (value != null)) \{\
      key = key.toLowerCase();\
      this.context.put(key, value);\
    \}\
    return this;\
  \}\
\
  public IBPTYLogger addNonIndexProperty(String key, String value)\
  \{\
    if (this.context == null) \{\
      this.context = new ConcurrentHashMap();\
      this.entry.setContext(this.context);\
    \}\
    if ((key != null) && (value != null)) \{\
      key = key.toLowerCase();\
      this.context.put(key + "_ni", value);\
    \}\
    return this;\
  \}\
\
  public IBPTYLogger addProperty(String key, long value)\
  \{\
    if (this.context == null) \{\
      this.context = new ConcurrentHashMap();\
      this.entry.setContext(this.context);\
    \}\
    if (key != null) \{\
      key = key.toLowerCase();\
      this.context.put(key + "-nu", Long.valueOf(value));\
    \}\
    return this;\
  \}\
\
  public void debug(Object objectToString)\
  \{\
    if (this.logger.isDebugEnabled()) \{\
      this.entry.setMessage(String.valueOf(objectToString));\
      this.logger.debug(this.entry);\
    \}\
  \}\
\
  public void debug(String message, Object objectToString)\
  \{\
    if (this.logger.isDebugEnabled()) \{\
      this.entry.setMessage(message + "-" + String.valueOf(objectToString));\
      this.logger.debug(this.entry);\
    \}\
  \}\
\
  public void error(Object objectToString)\
  \{\
    this.entry.setMessage(String.valueOf(objectToString));\
    this.logger.error(this.entry);\
  \}\
\
  public void error(Object objectToString, Throwable t)\
  \{\
    this.entry.setMessage(String.valueOf(objectToString));\
    this.logger.error(this.entry, t);\
  \}\
\
  public void error(String message, Object objectToString, Throwable t)\
  \{\
    this.entry.setMessage(message + "-" + String.valueOf(objectToString));\
    this.logger.error(this.entry, t);\
  \}\
\
  public void info(Object objectToString)\
  \{\
    if (this.logger.isInfoEnabled()) \{\
      this.entry.setMessage(String.valueOf(objectToString));\
      this.logger.info(this.entry);\
    \}\
  \}\
\
  public void info(String message, Object objectToString)\
  \{\
    if (this.logger.isInfoEnabled()) \{\
      this.entry.setMessage(message + "-" + String.valueOf(objectToString));\
      this.logger.info(this.entry);\
    \}\
  \}\
\
  public void warn(Object objectToString)\
  \{\
    this.entry.setMessage(String.valueOf(objectToString));\
    this.logger.warn(this.entry);\
  \}\
\
  public void warn(Object objectToString, Throwable t)\
  \{\
    this.entry.setMessage(String.valueOf(objectToString));\
    this.logger.warn(this.entry, t);\
  \}\
\
  public void warn(String message, Object objectToString, Throwable t)\
  \{\
    this.entry.setMessage(message + "-" + String.valueOf(objectToString));\
    this.logger.warn(this.entry, t);\
  \}\
\
  public void trace(Object objectToString)\
  \{\
    if (this.logger.isTraceEnabled()) \{\
      this.entry.setMessage(String.valueOf(objectToString));\
      this.logger.trace(this.entry);\
    \}\
  \}\
\
  public void trace(String message, Object objectToString)\
  \{\
    if (this.logger.isTraceEnabled()) \{\
      this.entry.setMessage(message + "-" + String.valueOf(objectToString));\
      this.logger.trace(this.entry);\
    \}\
  \}\
\
  public void fatal(Object objectToString)\
  \{\
    if (this.logger.isTraceEnabled()) \{\
      this.entry.setMessage(String.valueOf(objectToString));\
      this.logger.fatal(this.entry);\
    \}\
  \}\
\
  public void fatal(Object objectToString, Throwable t)\
  \{\
    this.entry.setMessage(String.valueOf(objectToString));\
    this.logger.fatal(this.entry, t);\
  \}\
\
  public void fatal(String message, Object objectToString, Throwable t)\
  \{\
    this.entry.setMessage(message + "-" + String.valueOf(objectToString));\
    this.logger.fatal(this.entry, t);\
  \}\
\
  public boolean isDebugEnabled()\
  \{\
    return this.logger.isDebugEnabled();\
  \}\
\
  public boolean isInfoEnabled()\
  \{\
    return this.logger.isInfoEnabled();\
  \}\
\
  public boolean isTraceEnabled()\
  \{\
    return this.logger.isTraceEnabled();\
  \}\
\
  public IBPTYLogger removeProperty(String key)\
  \{\
    if ((this.context != null) && (key != null)) \{\
      this.context.remove(key);\
    \}\
    return this;\
  \}\
\
  public IBPTYLogger startTimer()\
  \{\
    initTimerEntryIfAbsent();\
    this.startTime = System.currentTimeMillis();\
    this.stepStartTime = System.currentTimeMillis();\
    return this;\
  \}\
\
  private void initTimerEntryIfAbsent() \{\
    if (this.timerEntry == null) \{\
      this.timerEntry = getMetricEntry();\
      this.startTime = System.currentTimeMillis();\
      this.stepStartTime = System.currentTimeMillis();\
    \} else \{\
      this.timerEntry.setContext(this.context);\
    \}\
  \}\
\
  public IBPTYLogger startStep()\
  \{\
    initTimerEntryIfAbsent();\
    this.stepStartTime = System.currentTimeMillis();\
    return this;\
  \}\
\
  public void endStep(String stepName, int status)\
  \{\
    initTimerEntryIfAbsent();\
    this.timerEntry.setStep(stepName, System.currentTimeMillis() - this.stepStartTime);\
    this.timerEntry.setStatus(status);\
    this.logger.info(this.timerEntry);\
  \}\
\
  public void endStep(String stepName)\
  \{\
    initTimerEntryIfAbsent();\
    this.timerEntry.setStep(stepName, System.currentTimeMillis() - this.stepStartTime);\
    this.logger.info(this.timerEntry);\
  \}\
\
  public void endTimer(Object message, int status)\
  \{\
    initTimerEntryIfAbsent();\
    this.timerEntry.setMessage(String.valueOf(message));\
    this.timerEntry.setEnd(System.currentTimeMillis() - this.startTime);\
    this.timerEntry.setStatus(status);\
    this.logger.info(this.timerEntry);\
  \}\
\
  public void endTimer(Object message)\
  \{\
    initTimerEntryIfAbsent();\
    this.timerEntry.setMessage(String.valueOf(message));\
    this.timerEntry.setEnd(System.currentTimeMillis() - this.startTime);\
    this.logger.info(this.timerEntry);\
  \}\
\
  public void logCount(long count)\
  \{\
    BPTYMetricEntry counterEntry = getCounterEntry();\
    counterEntry.setContext(this.context);\
    counterEntry.setCount(count);\
    this.logger.info(counterEntry);\
  \}\
\
  public void logCount(String message, long count)\
  \{\
    BPTYMetricEntry counterEntry = getCounterEntry();\
    counterEntry.setContext(this.context);\
    counterEntry.setCount(count);\
    this.logger.info(counterEntry);\
  \}\
\
  private BPTYLogEntry getLogEntry() \{\
    BPTYLogEntry entry = BPTYLogEntry.getFuncEntry();\
    entry.setEntry(this.useCase, null, this.correlation);\
    return entry;\
  \}\
\
  private BPTYMetricEntry getMetricEntry() \{\
    BPTYMetricEntry entry = BPTYMetricEntry.getTimerEntry();\
    entry.setEntry(this.useCase, 0L, this.correlation);\
    entry.setContext(this.context);\
    return entry;\
  \}\
\
  private BPTYMetricEntry getCounterEntry() \{\
    BPTYMetricEntry entry = BPTYMetricEntry.getCounterEntry();\
    entry.setEntry(this.useCase, 0L, this.correlation);\
    entry.setContext(this.context);\
    return entry;\
  \}\
\
  public IBPTYLogger addContext(IBPTYLogContext context)\
  \{\
    if (context != null) \{\
      Map contextMap = context.getLogContextMap();\
      addContext(contextMap);\
    \}\
    return this;\
  \}\
\
  public IBPTYLogger addContext(Map<String, Object> contextMap)\
  \{\
    if (contextMap != null) \{\
      for (Map.Entry entry1 : contextMap.entrySet()) \{\
        Object value = entry1.getValue();\
        if (value != null) \{\
          if ((value instanceof Number))\
            addProperty((String)entry1.getKey(), convertToLong(value).longValue());\
          else if ((value instanceof String))\
            addProperty((String)entry1.getKey(), (String)value);\
          else \{\
            addProperty((String)entry1.getKey(), String.valueOf(value));\
          \}\
        \}\
      \}\
    \}\
    return this;\
  \}\
\
  private static Long convertToLong(Object value) \{\
    if ((value instanceof Long))\
      return Long.valueOf(Long.parseLong(value.toString()));\
    if ((value instanceof Double))\
      return Long.valueOf(()Double.parseDouble(value.toString()));\
    if ((value instanceof Float))\
      return Long.valueOf(()Float.parseFloat(value.toString()));\
    if ((value instanceof Integer))\
      return Long.valueOf(Integer.parseInt(value.toString()));\
    if ((value instanceof Short))\
      return Long.valueOf(Short.parseShort(value.toString()));\
    if ((value instanceof BigInteger))\
      return Long.valueOf(new BigInteger(value.toString()).longValue());\
    if ((value instanceof BigDecimal))\
      return Long.valueOf(new BigDecimal(value.toString()).longValue());\
    if ((value instanceof Byte)) \{\
      return Long.valueOf(Byte.parseByte(value.toString()));\
    \}\
    return Long.valueOf(0L);\
  \}\
\}}